// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/week-4-workshop/product-service/internal/service/product (interfaces: IRepository,ICategoryClient)

// Package product_service is a generated GoMock package.
package product_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// SaveProduct mocks base method.
func (m *MockIRepository) SaveProduct(arg0 context.Context, arg1 *Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProduct indicates an expected call of SaveProduct.
func (mr *MockIRepositoryMockRecorder) SaveProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProduct", reflect.TypeOf((*MockIRepository)(nil).SaveProduct), arg0, arg1)
}

// MockICategoryClient is a mock of ICategoryClient interface.
type MockICategoryClient struct {
	ctrl     *gomock.Controller
	recorder *MockICategoryClientMockRecorder
}

// MockICategoryClientMockRecorder is the mock recorder for MockICategoryClient.
type MockICategoryClientMockRecorder struct {
	mock *MockICategoryClient
}

// NewMockICategoryClient creates a new mock instance.
func NewMockICategoryClient(ctrl *gomock.Controller) *MockICategoryClient {
	mock := &MockICategoryClient{ctrl: ctrl}
	mock.recorder = &MockICategoryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoryClient) EXPECT() *MockICategoryClientMockRecorder {
	return m.recorder
}

// IsCategoryExists mocks base method.
func (m *MockICategoryClient) IsCategoryExists(arg0 context.Context, arg1 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCategoryExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCategoryExists indicates an expected call of IsCategoryExists.
func (mr *MockICategoryClientMockRecorder) IsCategoryExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCategoryExists", reflect.TypeOf((*MockICategoryClient)(nil).IsCategoryExists), arg0, arg1)
}
