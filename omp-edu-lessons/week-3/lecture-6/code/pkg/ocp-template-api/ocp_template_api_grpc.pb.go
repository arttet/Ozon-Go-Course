// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_template_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpTemplateApiServiceClient is the client API for OcpTemplateApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpTemplateApiServiceClient interface {
	// DescribeTemplateV1 - Describe a template
	DescribeTemplateV1(ctx context.Context, in *DescribeTemplateV1Request, opts ...grpc.CallOption) (*DescribeTemplateV1Response, error)
}

type ocpTemplateApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpTemplateApiServiceClient(cc grpc.ClientConnInterface) OcpTemplateApiServiceClient {
	return &ocpTemplateApiServiceClient{cc}
}

func (c *ocpTemplateApiServiceClient) DescribeTemplateV1(ctx context.Context, in *DescribeTemplateV1Request, opts ...grpc.CallOption) (*DescribeTemplateV1Response, error) {
	out := new(DescribeTemplateV1Response)
	err := c.cc.Invoke(ctx, "/ozoncp.ocp_template_api.v1.OcpTemplateApiService/DescribeTemplateV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpTemplateApiServiceServer is the server API for OcpTemplateApiService service.
// All implementations must embed UnimplementedOcpTemplateApiServiceServer
// for forward compatibility
type OcpTemplateApiServiceServer interface {
	// DescribeTemplateV1 - Describe a template
	DescribeTemplateV1(context.Context, *DescribeTemplateV1Request) (*DescribeTemplateV1Response, error)
	mustEmbedUnimplementedOcpTemplateApiServiceServer()
}

// UnimplementedOcpTemplateApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOcpTemplateApiServiceServer struct {
}

func (UnimplementedOcpTemplateApiServiceServer) DescribeTemplateV1(context.Context, *DescribeTemplateV1Request) (*DescribeTemplateV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTemplateV1 not implemented")
}
func (UnimplementedOcpTemplateApiServiceServer) mustEmbedUnimplementedOcpTemplateApiServiceServer() {}

// UnsafeOcpTemplateApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpTemplateApiServiceServer will
// result in compilation errors.
type UnsafeOcpTemplateApiServiceServer interface {
	mustEmbedUnimplementedOcpTemplateApiServiceServer()
}

func RegisterOcpTemplateApiServiceServer(s grpc.ServiceRegistrar, srv OcpTemplateApiServiceServer) {
	s.RegisterService(&OcpTemplateApiService_ServiceDesc, srv)
}

func _OcpTemplateApiService_DescribeTemplateV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTemplateV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTemplateApiServiceServer).DescribeTemplateV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozoncp.ocp_template_api.v1.OcpTemplateApiService/DescribeTemplateV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTemplateApiServiceServer).DescribeTemplateV1(ctx, req.(*DescribeTemplateV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpTemplateApiService_ServiceDesc is the grpc.ServiceDesc for OcpTemplateApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpTemplateApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozoncp.ocp_template_api.v1.OcpTemplateApiService",
	HandlerType: (*OcpTemplateApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeTemplateV1",
			Handler:    _OcpTemplateApiService_DescribeTemplateV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ozoncp/ocp_template_api/v1/ocp_template_api.proto",
}
